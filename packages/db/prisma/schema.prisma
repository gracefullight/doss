// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  customCategories CustomCategory[]
  bankAccounts     BankAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bank {
  id           String        @id @default(cuid())
  // ? https://bank-code.co.kr
  code         String        @unique
  name         String
  icon         String
  swiftCode    String?       @unique
  bankAccounts BankAccount[]
}

model BankAccount {
  id           String        @id @default(cuid())
  name         String
  balance      Float
  bankId       String
  bank         Bank          @relation(fields: [bankId], references: [id])
  transactions Transaction[]
  userId       String
  User         User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id               String          @id @default(cuid())
  type             String
  amount           Float
  // TODO: naming for date col
  date             DateTime
  memo             String?
  categoryType     String          @default("category")
  categoryId       String
  category         Category?       @relation(fields: [categoryId], references: [id])
  customCategoryId String
  customCategory   CustomCategory? @relation(fields: [customCategoryId], references: [id])
  currentBalance   Float
  bankAccountId    String
  bankAccount      BankAccount     @relation(fields: [bankAccountId], references: [id])
}

model Category {
  id           String        @id @default(cuid())
  name         String
  transactions Transaction[]
}

model CustomCategory {
  id           String        @id @default(cuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Market {
  id          String        @id @default(cuid())
  // e.g. "US", "KR", "FX"
  code        String        @unique
  // e.g. "미국주식", "한국주식", "환율"
  name        String
  MarketIndex MarketIndex[]
  Stocks      Stock[]
}

model MarketIndex {
  id       String  @id @default(cuid())
  marketId String
  // e.g. "SPX", "K200", "USDKRW"
  ticker   String
  // e.g. "S&P 500", "KOSPI 200", "원/달러 환율"
  name     String
  Market   Market  @relation(fields: [marketId], references: [id])
  OHLCV    OHLCV[]

  @@unique([marketId, ticker])
}

model Stock {
  id       String  @id @default(cuid())
  marketId String
  ticker   String
  name     String
  Market   Market  @relation(fields: [marketId], references: [id])
  OHLCV    OHLCV[]

  @@unique([marketId, ticker])
}

model OHLCV {
  id            String       @id @default(cuid())
  subjectId     String // This can be a Stock ID or a MarketIndex ID
  subjectType   String // This can be "Stock" or "MarketIndex"
  timeframe     String
  datetime      DateTime     @map("datetime")
  open          Float
  high          Float
  low           Float
  close         Float
  volume        Float
  MarketIndex   MarketIndex? @relation(fields: [marketIndexId], references: [id])
  marketIndexId String?
  Stock         Stock?       @relation(fields: [stockId], references: [id])
  stockId       String?
}
